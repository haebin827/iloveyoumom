-- Create table (only if it is not exist)
create table if not exists public.history (
                                              id           bigint generated by default as identity primary key,
                                              user_id      uuid not null,
                                              visit_time   timestamptz not null default now(),
    customer_id  bigint,
    visit_date   date,
    constraint history_customer_id_fkey
    foreign key (customer_id)
    references public.customer (id)
    on delete cascade,
    constraint history_user_id_fkey
    foreign key (user_id)
    references auth.users (id)
    on delete cascade
    );

-- indexing
create index if not exists idx_history_user_id on public.history(user_id);
create index if not exists idx_history_customer_id on public.history(customer_id);
create index if not exists idx_history_visit_date on public.history(visit_date);

-- RLS setting
alter table public.history enable row level security;

-- 본인(user_id = auth.uid())만 SELECT/INSERT/UPDATE/DELETE
create policy "history_select_own"
on public.history
for select
               using (auth.uid() = user_id);

create policy "history_insert_own"
on public.history
for insert
with check (auth.uid() = user_id);

create policy "history_update_own"
on public.history
for update
                      using (auth.uid() = user_id)
    with check (auth.uid() = user_id);

create policy "history_delete_own"
on public.history
for delete
using (auth.uid() = user_id);

-- 3-2) (선택) 관리자/서버 전용: 모두 접근 허용
-- service_role(백엔드)에서 전체 조회/수정 가능하게 하려면:
create policy "history_admin_all"
on public.history
as permissive
for all
to service_role
using (true)
with check (true);
