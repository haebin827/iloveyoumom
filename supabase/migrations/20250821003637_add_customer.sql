-- Create table (only if it is not exist)
create table if not exists public.customer (
    id             bigint generated by default as identity primary key,
    user_id        uuid not null,
    name           varchar not null,
    created_at     timestamptz not null default now(),
    phone          varchar unique,
    top_size       varchar,
    bottom_size    varchar,
    body_type      text,
    style_prefer   text,
    color_prefer   varchar,
    birth          date,
    color_avoid    varchar,
    note           text,
    drink_prefer   varchar,
    first_visit    date,
    gender         varchar,
    status         boolean not null default 1,
    visit_count    bigint not null default 0,

    constraint customer_user_fk
    foreign key (user_id)
    references auth.users(id)
    on delete cascade
);

-- Enable RLS
alter table public.customer enable row level security;

-- Select: only owner can read (exclude soft deleted)
create policy "customer_select_own"
on public.customer
for select
               using (auth.uid() = user_id and status = 1);

-- Insert: only owner can insert their row
create policy "customer_insert_own"
on public.customer
for insert
with check (auth.uid() = user_id);

-- Update: only owner can update their row (exclude soft deleted for reads)
create policy "customer_update_own"
on public.customer
for update
                      using (auth.uid() = user_id)
    with check (auth.uid() = user_id);

-- Soft Delete: only owner can soft delete (set status = 0)
-- Note: Use UPDATE to set status = 0 instead of DELETE
create policy "customer_soft_delete_own"
on public.customer
for update
using (auth.uid() = user_id)
with check (auth.uid() = user_id);
